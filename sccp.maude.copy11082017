
---------------------------------------------------------
---- SCCP Virtual Machine
---- By: HÃ©ctor Delgado, Camilo Rueda and Frank Valencia.
---------------------------------------------------------


---- Module for Naive String Pattern Matching: The string S matches the pattern P iff (S | P) =>* ("" | "").
 
mod STRING-PATTERN is
 pr STRING .
 sort Pattern .
 subsort String < Pattern .
 sort Comp .
 
 op car : Pattern -> Pattern .
 op cdr : Pattern -> Pattern . 
 op nil : -> Pattern .
 op strcar : String -> String .
 op strcdr : String -> String .
 op _._ : Pattern Pattern -> Pattern [ctor assoc id: "" prec 20] . 
 op * : -> Pattern . 
 op ? : -> Pattern .
 op _v_ : Pattern Pattern -> Pattern [ctor  assoc comm prec 40] .
 op _&_ : Pattern Pattern -> Pattern [ctor  assoc comm prec 30] .
 op [_]* : Pattern -> Pattern [ctor] .
 op (_|_) : String Pattern -> Comp [ctor] . 
 
 op number :  -> Pattern .
 
 vars  P P' Q Q' R : Pattern .
 vars S S' : String .
 
 ---Defining functions car and cdr (inspired in lisp) but for patterns.
 ceq car(S . P) = substr(S,0,1) if S =/= "" .
 ceq cdr(S . P) = substr(S,1,length(S)) . P if S =/= "" .
 eq car(* . P) = * .
 eq cdr(* . P) = P .
 eq car(? . P) = ? .
 eq cdr(? . P) = P .
 
 ceq strcar(S) = substr(S,0,1) if S =/= "" .
 ceq strcdr(S) = substr(S,1,length(S)) if S =/= "" .
---------------

---Some Simplification rules
 
eq P & P = P .
eq P v P = P .


---Pattern Matching Rules
 
 crl [stringsymbols]:
  ( S | P )  =>  ( strcdr(S) | cdr(P) )  
  if 
  strcar(S) == car(P) /\ 
  S =/= "" 
  /\ 
  P =/= ""  .
  

 rl [starsymbolcase0]:
  ( S | *  )  =>  ( S |  "" ) .

 crl [starsymbolcasen]:
  ( S | *  )  =>  ( strcdr(S) | * )
  if
  S =/= ""
  .

 crl [anysymbol]:
  ( S | ?  )  =>  ( strcdr(S) | "" ) 
  if
 S =/= ""
  .


 crl [concat]:
  ( S | P . Q )  => ( S' | Q ) 
  if
 S =/= ""  /\   P =/= ""  /\ Q =/= ""  /\  ( S | P )  =>  ( S' | "" )
  .


crl [or]:
  ( S | (P v Q) )  =>  ( S | P )
  if
 S =/= ""
  .

crl [and]:
  ( S | (P & Q) )  =>  ( S' | (P' & Q') )
  if
 S =/= "" /\   P =/= ""  /\ Q =/= "" /\  ( S | P )  =>  ( S' | P' ) /\ ( S | Q )  =>  ( S' | Q' )  
  .

 rl [staroperatorcase0]:
  ( S | [ P ]* )  =>  ( S |  ""  ) .

 rl [staroperatorcasen]:
  ( S | [ P ]* )  =>  ( S |  P . [ P ]*  ) .

 eq number = [ "0" v "1" v "2" v "3" v "4" v "5" v "6" v "7" v "8" v "9" ]* .



endm
-----------------

load gen-tree.maude

----Module that define the type of the constraints.
mod CONST is
 pr STRING .
 sort Const .
 pr STRING-PATTERN .
 subsort Pattern < Const . 
 
endm
----------------


----Definition of views for the constraints and the constraint sets.
view Const from TRIV to CONST is
  sort Elt to Const .
endv

view ConstSet from TRIV to SET{Const} * (sort NeSet{Const} to NeConstSet, sort Set{Const} to ConstSet) is
  sort Elt to ConstSet .
endv
----------------

----Module that implements the store as a gen-tree of sets of constraints.
mod CLOUD is

 pr BOOL .
 sort Cloud .
 pr INT .
 pr CONST .
 
 pr SET{Const} * (sort NeSet{Const} to NeConstSet, sort Set{Const} to ConstSet) .
 inc GEN-TREE{ConstSet} * (sort Tree{ConstSet} to TreeConstSet, sort Forest{ConstSet} to ForestConstSet) .
 
 subsort TreeConstSet < Cloud .
 
 ---Main operations
 op (_)^_ : Cloud Nat -> Cloud [ctor] . 
 op _U[_]_ : TreeConstSet TreeConstSet Nat -> TreeConstSet .
 ------
 
 ---Auxiliar operations
 op replace : ForestConstSet TreeConstSet Nat -> ForestConstSet .
 op find : ForestConstSet Nat -> TreeConstSet . 
 op auxfind : TreeConstSet Nat -> TreeConstSet .
 op insertel : String Cloud -> Cloud .
 op withoutlast : ForestConstSet -> ForestConstSet .
 op lastelement : ForestConstSet -> TreeConstSet .
 op mergeforest : ForestConstSet ForestConstSet -> ForestConstSet .
 op expandforest : ForestConstSet ForestConstSet Nat -> ForestConstSet .
 op howmanychildren : Int Int -> Int .
 op auxreplace : TreeConstSet TreeConstSet Int -> ForestConstSet .
 ---
 
 vars tc t : TreeConstSet .
 vars T T1 OF NF : ForestConstSet .
 vars N NC : Const .
 var NS : ConstSet .
 var C : Cloud .
 vars N1 NC1 : Int .
 var i : Nat . 
 
 ---NF: New Forest, OF: Old Forest
 ---Auxiliar functions
 eq withoutlast(t : empty-forest) = empty-forest .
 eq withoutlast(t : T) = t : withoutlast(T) .
 eq lastelement(t : empty-forest) = t .
 eq lastelement(t : T) = lastelement(T) . 
 
 ---(mergeforest: merges two forests. Note: efficiency can be improved; the forest is traversed twice.)
 eq mergeforest(empty-forest,NF) = NF .
 eq mergeforest(OF,NF) = mergeforest(withoutlast(OF),lastelement(OF) : NF) .
 ---
 
 eq expandforest(OF,NF,0) = mergeforest(OF,NF) .
 eq expandforest(OF,NF,s(N1)) = expandforest(OF,empty[empty-forest] : NF,N1) .
 ceq howmanychildren(N1,NC1) = 0 if NC1 > N1 . 
 eq howmanychildren(N1,NC1) = (N1 - NC1) + 1 .
 eq auxreplace(tc,t,N1) = replace(expandforest(children(tc),empty-forest,howmanychildren(N1,#children(tc))),t,N1) .
 eq find(t : T, 0) = t .
 eq find(t : T, s(N1)) = find(T,N1) .
 eq auxfind(t,N1) = find(expandforest(children(t),empty-forest,howmanychildren(N1,#children(t))),N1) .
 eq replace(tc : T,t,0) = t : T .
 eq replace(tc : T,t,s(N1)) = tc : replace(T,t,N1) .
 ---
 
 eq (tc) ^ N1 = auxfind(tc,N1) .  
 eq tc U [t] N1 = root(tc)[auxreplace(tc,t,N1)] . 
  
 eq insertel(N,C) = (insert(N,root(C)))[children(C)] .     
 
endm
---------------------


---Defining the spatial instructions
mod SPAINSTRUC is
 pr META-LEVEL .
 sort SpaInstruc .
 pr QID .
 pr CONST .
 
 vars P Q P1 P2 P3 : SpaInstruc .
 var i : Nat .
 vars X X1 : Qid .
 var c : Const .
 
 ---Defining the structure of the spatial instructions
 op tell(_) : Const -> SpaInstruc [ctor] .
 op skip : -> SpaInstruc [ctor] .
 op s : SpaInstruc Nat -> SpaInstruc [ctor] .
 op _||_ : SpaInstruc SpaInstruc -> SpaInstruc [ctor comm assoc prec 50] .
 op rec _in_ : Qid SpaInstruc -> SpaInstruc [ctor prec 30] .
 op ask_then_ : Const SpaInstruc -> SpaInstruc [ctor prec 30] .
 op v(_) : Qid -> SpaInstruc [ctor] .
 op x : SpaInstruc Nat -> SpaInstruc [ctor] .
 op unless_next_ : Const SpaInstruc -> SpaInstruc [ctor prec 30] .
 op next_ : SpaInstruc -> SpaInstruc [ctor prec 30] . 
  
 op replaceVar : SpaInstruc Qid SpaInstruc -> SpaInstruc . 
 
 
 ---Defining the replaceVar funtion for each spatial instruction.
 eq replaceVar(P1 || P2,X,P3) = replaceVar(P1,X,P3) || replaceVar(P2,X,P3) .
 eq replaceVar(ask c then P1,X,P3) = ask c then replaceVar(P1,X,P3) .
 eq replaceVar(tell(c),X,P3) = tell(c) .
 eq replaceVar(skip,X,P3) = skip .
 eq replaceVar(v(X), X ,P3) = P3 .
 ceq replaceVar(v(X), X1 ,P3) = v(X) if X =/= X1 .
 eq replaceVar(s(P1,i), X , P3) = s(replaceVar(P1,X,P3),i) .
 eq replaceVar(x(P1,i),X,P2) = x(replaceVar(P1,X,P2),i) .
 eq replaceVar(rec X in P1, X, P2) = rec X in P1 . 
 ceq replaceVar(rec X1 in P1, X, P2) = rec X1 in replaceVar(P1, X , P2) if X1 =/= X  .
 eq replaceVar(unless c next P1,X,P3) = unless c next replaceVar(P1,X,P3) .
 eq replaceVar(next P1,X,P3) = next replaceVar(P1,X,P3) .
 ---

--- Structural Rules ---

eq  P || P = P .
eq  P || skip = P . 
eq  rec X in skip  = skip . 
 
 --- Equations for deleting skip instructions and applying the extrusion operator.
 
 eq s(x(P,i) || Q , i) =  P || s(Q,i) .
 
 eq s(x(P,i),i)  =  P .
   
 eq s(skip,i)  = skip .

 eq s(P || Q, i) = s(P, i) || s(Q, i) .

---eq  s(P, i) || s(Q, i) = s(P || Q, i) . 

 eq x(skip,i) = skip .

 ------
endm
------------

---Defining the main configuration for a SCCP system.
mod SCCP-SYMBOLS is
 pr CLOUD .
 pr SPAINSTRUC .
 sort Conf .

 op <_;_> : SpaInstruc Cloud -> Conf [ctor] .
 
endm 
--------


---Module that defines the operational semantics of the language.
mod SCCP is
 inc SCCP-SYMBOLS .
 pr STRING-PATTERN .
 pr CONST .
 
 op f : SpaInstruc Cloud -> SpaInstruc .
 var c : Const . 
 
 var C1 : ConstSet .
 var S1 : Const .
 
 var C : Const .
 vars CL CL' TM TM' : Cloud .
 vars P Q P' : SpaInstruc .
 var SP : SpaInstruc .
 var i : Nat .
 var F : ForestConstSet .
 var X : Qid .
 
 eq f(unless c next P , CL) = P . 
--- eq f(P || Q , CL) = f(P , CL) || f(Q , CL) .

 ---Rules for Tell Operator
 rl < tell(C) ; CL > =>
 < skip ; insertel(C,CL) > .
 
 rl < tell(C) || Q ; CL > =>
 < skip || Q ; insertel(C,CL) > .
 ------
 
 
 ---Rules for Spatial instructions
 crl [SpaInstruc] :
 < s(P,i) ; CL > => 
 < s(P',i) ; CL U [CL'] i > 
 if 
 < P ; (CL) ^ i > => 
 < P' ; CL' > /\ P =/= P' .

 crl [SpaInstruc2] :
 < Q || s(P,i) ; CL > => 
 < Q || s(P',i) ; CL U [CL'] i > 
 if 
 < P ; (CL) ^ i > => 
 < P' ; CL' > /\ P =/= P' .
 ------
 
 ---Rules for Recursion instructions
 crl [Rec] : 
 < rec X in P ; CL > => 
 < P' ; CL' > 
 if < replaceVar(P,X,rec X in P) ; CL > => 
 < P' ; CL' > .
 
  crl [Rec2] : 
 < rec X in P || Q ; CL > => 
 < P' || Q ; CL' > 
 if < replaceVar(P,X,rec X in P) ; CL > => 
 < P' ; CL' > .
 ------
 
 ---Rules for When Do Operator
 crl < ask C then P ; (S1 , C1)[F] > =>
 < P ; (S1 , C1)[F] >
 if
 (S1 | C) => ("" | "") .

 crl < Q || ask C then P ; (S1 , C1)[F] > =>
 < Q || P ; (S1 , C1)[F] >
 if
 (S1 | C) => ("" | "") .
 ------



endm
--------

 ---Derived Operators & User Language For Social Networking .

mod SYNTAX4SOCIALNET is
 inc SCCP .
 
 op header :  -> Pattern .
 op enter_do_ : Nat SpaInstruc -> SpaInstruc [ctor prec 30] .
 op exit_do_ : Nat SpaInstruc -> SpaInstruc [ctor prec 30] .
 op _@_ : SpaInstruc Nat -> SpaInstruc [ctor prec 30] .
 op _^_ : SpaInstruc Nat -> SpaInstruc [ctor prec 30] . 
 op [_]_ : SpaInstruc Nat -> SpaInstruc .
 op xtr : SpaInstruc Nat -> SpaInstruc .
 op call(_) : Qid -> SpaInstruc [ctor] .
 op post(_) : Const -> SpaInstruc [strat (0) prec 30] . 
 op repeat_ : SpaInstruc -> SpaInstruc [strat (0) prec 30] .
 op whenever_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op until_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op when_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op while_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op now_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op now_then_else_ : Const SpaInstruc SpaInstruc -> SpaInstruc [prec 30] .
 op say(_) : Const -> SpaInstruc [strat (0) prec 30] .
 op kill(_) : Const -> SpaInstruc [strat (0) prec 30] .
 op kill-pid :  -> Const .
 op kill-all : -> Const .
 op kill-posts : -> Const .
 op kill-post-cond : -> Const .
 op kill-proc-cond : -> Const .
 vars P P' Q : SpaInstruc .
 var i : Nat .
 vars c pid : Const .
 var X : Qid . 
 eq [P]i = s(P,i) .
 eq xtr(P,i) = x(P,i) .
 eq enter i do P = s(P,i) .
 eq exit i do P = x(P,i) .
 eq P @ i = s(P,i) . 
 eq P ^ i = x(P,i ) .

 eq header = "<" .  *   .

 eq kill-all  = "{k:a}" .
 eq kill-posts = "{k:p}" . 
 eq kill-post-cond = kill-pid v kill-all  .
 eq kill-proc-cond = kill-pid v kill-all .
 eq kill-pid = "{k:pid}" .

 ceq kill(c) = tell(kill-all) if c = "all" .
 ceq kill(c) = tell(kill-posts) || tell(kill-pid) if c = "posts" . 
 ceq kill(c) = tell("{k:" + c + "}") || tell(kill-pid) if c =/= "all" /\ c =/= "posts" .
 
 eq post(c)  = rec 'vpost in ( tell(c) || 
                    unless kill-post-cond next v('vpost) ) .
 

 eq repeat repeat P = repeat P . 
 eq repeat ( P ||  Q) = repeat P || repeat Q .

 eq repeat P = rec 'vrep in ( P || unless kill-proc-cond next v('vrep)) .
 
 eq whenever c do P = rec 'vwhenever in ( ask header . c then P || unless kill-proc-cond next v('vwhenever)) .

 eq until c do P = rec 'vuntil in (P || unless ( (header . c) v kill-proc-cond) next v('vuntil)) .

 eq when c do P = rec 'vwhen in (ask header . c then P || unless ( (header . c) v kill-proc-cond ) next v('vwhen)) . 
 eq while c do P = rec 'vwhile in (ask header . c then P || ask header . c then (unless kill-proc-cond  next v('vwhile)) ) .  
 eq now c do P = ask c then P .
 eq now c then P else Q =  (ask header . c then  unless kill-proc-cond next P) || (unless ( (header . c) v kill-proc-cond) next Q) .

 eq say(c) = tell(c) . 

 eq call(X) = unless kill-proc-cond next v(X) .
endm


mod NTCC is
 inc SCCP-SYMBOLS .

 var S : ConstSet .
 var C : Const .
 var c : Const .
 var X : Qid .
 vars P Q P' : SpaInstruc .
 var i : Nat .
 op f : SpaInstruc -> SpaInstruc .
 
 eq f(next P) = P .
 eq f(P || Q) = f(P) || f(Q) .
 eq f(tell(c)) = skip .
 eq f(ask c then P) = skip .
 eq f(unless c next P) = P .
 eq f(rec X in P) = rec X in f(P) . 
 eq f(s(P,i)) = s(f(P),i) .
---( f(x(P,i)) = skip ???? ) 
eq f(x(P,i)) = x(f(P),i) .
 eq f(skip) = skip .
 

endm

mod NTCCPLUS is
 inc SCCP-SYMBOLS . 
 pr STRING-PATTERN .
 op f : SpaInstruc Cloud -> SpaInstruc .
  
 var F : ForestConstSet .
 var S : ConstSet .
 vars C c : Const .
 var X : Qid .
 vars P Q R : SpaInstruc .
 var i : Nat .
 var M : Cloud . 

 rl [par] :
  f(P || Q , M) => f(P , M) || f(Q , M) .
 
 rl [skip] :
  f(skip , M) => skip .
 
 rl [next] :
  f(next P , M) => P .
 
 rl [tell] :
  f(tell(c) , M) => skip .
 
 rl [ask] :
  f(ask c then P , M) => skip .
 
 rl [rec] :
  f(rec X in P , M) => rec X in f(P , M) .
 
 rl [space] :
  f(s(P,i) , M) => s(f(P , (M) ^ i),i) .

 rl [xtruc] :
  f(x(P,i) , M) => skip .
 
 crl [unless] :
  f(unless c next P , (C,S)[F]) => skip 
  if 
  ( C | c ) => ( "" | "" ) .

endm 


mod SCCP-RUN is
  pr SYNTAX4SOCIALNET .
  
endm

mod NTCC-RUN is
 pr NTCCPLUS .

endm

mod U2N is
 pr SPAINSTRUC .
 op u2n : SpaInstruc -> SpaInstruc .
 
 vars P Q : SpaInstruc .
 var c : Const .
 var i : Nat .
 var x : Qid .
 
 eq u2n(tell(c)) = tell(c) .
 eq u2n(skip) = skip .
 eq u2n(s(P,i)) = s(u2n(P),i) .
 eq u2n(x(P,i)) = x(u2n(P),i) .
 eq u2n(rec x in P) = rec x in u2n(P) .
 eq u2n(ask c then P) = ask c then u2n(P) .
 eq u2n(v(x)) = v(x) .
 eq u2n(P || Q) = u2n(P) || u2n(Q) .
 eq u2n(unless c next P) = next P . 
 eq u2n(next P) = next P .

endm


