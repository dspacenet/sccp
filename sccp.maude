---------------------------------------------------------
---- SCCP Virtual Machine
---- By: HÃ©ctor Delgado, Camilo Rueda and Frank Valencia.
---------------------------------------------------------

---- Module for Naive String Pattern Matching: The string S matches the pattern P iff (S | P) =>* ("" | "").

mod STRING-PATTERN is
 pr STRING .
 sort Pattern .
 subsort String < Pattern .
 sort Comp .

 op car : Pattern -> Pattern .
 op cdr : Pattern -> Pattern .
 op nil : -> Pattern .
 op strcar : String -> String .
 op strcdr : String -> String .
 op _._ : Pattern Pattern -> Pattern [ctor assoc id: "" prec 20] .
 op * : -> Pattern .
 op ? : -> Pattern .
 op _v_ : Pattern Pattern -> Pattern [ctor  assoc comm prec 40] .
 op _&_ : Pattern Pattern -> Pattern [ctor  assoc comm prec 30] .
 op [_]* : Pattern -> Pattern [ctor] .
 op (_|_) : String Pattern -> Comp [ctor] .

 op isnumber :  -> Pattern .
 op isdigit : -> Pattern .
 op isnonz-digit : -> Pattern .

 vars  P P' Q Q' R : Pattern .
 vars S S' : String .

 ---Defining functions car and cdr (inspired in lisp) but for patterns.
 ceq car(S . P) = substr(S,0,1) if S =/= "" .
 ceq cdr(S . P) = substr(S,1,length(S)) . P if S =/= "" .
 eq car(* . P) = * .
 eq cdr(* . P) = P .
 eq car(? . P) = ? .
 eq cdr(? . P) = P .

 ceq strcar(S) = substr(S,0,1) if S =/= "" .
 ceq strcdr(S) = substr(S,1,length(S)) if S =/= "" .
---------------

---Some Simplification rules

eq P & P = P .
eq P v P = P .


---Pattern Matching Rules

 crl [stringsymbols]:
  ( S | P )  =>  ( strcdr(S) | cdr(P) )
  if
  strcar(S) == car(P) /\
  S =/= ""
  /\
  P =/= ""  .


 rl [starsymbolcase0]:
  ( S | *  )  =>  ( S |  "" ) .

 crl [starsymbolcasen]:
  ( S | *  )  =>  ( strcdr(S) | * )
  if
  S =/= ""
  .

 crl [anysymbol]:
  ( S | ?  )  =>  ( strcdr(S) | "" )
  if
 S =/= ""
  .


 crl [concat]:
  ( S | P . Q )  => ( S' | Q )
  if
 S =/= ""  /\   P =/= ""  /\ Q =/= ""  /\  ( S | P )  =>  ( S' | "" )
  .


crl [or]:
  ( S | (P v Q) )  =>  ( S | P )
  if
 S =/= ""
  .

crl [and]:
  ( S | (P & Q) )  =>  ( S' | (P' & Q') )
  if
 S =/= "" /\   P =/= ""  /\ Q =/= "" /\  ( S | P )  =>  ( S' | P' ) /\ ( S | Q )  =>  ( S' | Q' )
  .

 rl [staroperatorcase0]:
  ( S | [ P ]* )  =>  ( S |  ""  ) .

 rl [staroperatorcasen]:
  ( S | [ P ]* )  =>  ( S |  P . [ P ]*  ) .


 eq isdigit = "0" v isnonz-digit .

 eq isnonz-digit =   "1" v "2" v "3" v "4" v "5" v "6" v "7" v "8" v "9"  .

 eq isnumber = isnonz-digit . [ isdigit ]* .

endm
-----------------

load gen-tree.maude

----Module that define the type of the constraints.
mod CONST is
 pr STRING .
 sort Const .
 pr STRING-PATTERN .
 subsort Pattern < Const .

endm
----------------


----Definition of views for the constraints and the constraint sets.
view Const from TRIV to CONST is
  sort Elt to Const .
endv

view ConstSet from TRIV to SET{Const} * (sort NeSet{Const} to NeConstSet, sort Set{Const} to ConstSet) is
  sort Elt to ConstSet .
endv
----------------

----Module that implements the store as a gen-tree of sets of constraints.
mod CLOUD is
---??BOOL??
 pr BOOL .
 sort Cloud .
 pr INT .
 pr CONST .

 pr SET{Const} * (sort NeSet{Const} to NeConstSet, sort Set{Const} to ConstSet) .
 inc GEN-TREE{ConstSet} * (sort Tree{ConstSet} to TreeConstSet, sort Forest{ConstSet} to ForestConstSet) .

 subsort TreeConstSet < Cloud .

 ---Main operations
 op (_)^_ : Cloud Nat -> Cloud [ctor] .
 op _U[_]_ : TreeConstSet TreeConstSet Nat -> TreeConstSet .
 ------

 ---Auxiliar operations
 op replace : ForestConstSet TreeConstSet Nat -> ForestConstSet .
 op find : ForestConstSet Nat -> TreeConstSet .
 op auxfind : TreeConstSet Nat -> TreeConstSet .
 op insertel : String Cloud -> Cloud .
 op withoutlast : ForestConstSet -> ForestConstSet .
 op lastelement : ForestConstSet -> TreeConstSet .
 op mergeforest : ForestConstSet ForestConstSet -> ForestConstSet .
 op expandforest : ForestConstSet ForestConstSet Nat -> ForestConstSet .
 op howmanychildren : Int Int -> Int .
 op auxreplace : TreeConstSet TreeConstSet Int -> ForestConstSet .
 ---

 vars tc t : TreeConstSet .
 vars T T1 OF NF : ForestConstSet .
 vars N NC : Const .
 var NS : ConstSet .
 var C : Cloud .
 vars N1 NC1 : Int .
 var i : Nat .

 ---NF: New Forest, OF: Old Forest
 ---Auxiliar functions
 eq withoutlast(t : empty-forest) = empty-forest .
 eq withoutlast(t : T) = t : withoutlast(T) .
 eq lastelement(t : empty-forest) = t .
 eq lastelement(t : T) = lastelement(T) .

 ---(mergeforest: merges two forests. Note: efficiency can be improved; the forest is traversed twice.)
 eq mergeforest(empty-forest,NF) = NF .
 eq mergeforest(OF,NF) = mergeforest(withoutlast(OF),lastelement(OF) : NF) .
 ---

 eq expandforest(OF,NF,0) = mergeforest(OF,NF) .
 eq expandforest(OF,NF,s(N1)) = expandforest(OF,empty[empty-forest] : NF,N1) .
 ceq howmanychildren(N1,NC1) = 0 if NC1 > N1 .
 eq howmanychildren(N1,NC1) = (N1 - NC1) + 1 .
 eq auxreplace(tc,t,N1) = replace(expandforest(children(tc),empty-forest,howmanychildren(N1,#children(tc))),t,N1) .
 eq find(t : T, 0) = t .
 eq find(t : T, s(N1)) = find(T,N1) .
 eq auxfind(t,N1) = find(expandforest(children(t),empty-forest,howmanychildren(N1,#children(t))),N1) .
 eq replace(tc : T,t,0) = t : T .
 eq replace(tc : T,t,s(N1)) = tc : replace(T,t,N1) .
 ---

 eq (tc) ^ N1 = auxfind(tc,N1) .
 eq tc U [t] N1 = root(tc)[auxreplace(tc,t,N1)] .

 eq insertel(N,C) = (insert(N,root(C)))[children(C)] .

endm
---------------------


---Defining the spatial instructions
mod SPAINSTRUC is
 pr META-LEVEL .
 sort SpaInstruc .
 pr QID .
 pr CONST .



 ---Defining the structure of the spatial instructions
 op tell(_) : Const -> SpaInstruc [ctor] .
 op ask_then_ : Const SpaInstruc -> SpaInstruc [ctor prec 30] .
 op _||_ : SpaInstruc SpaInstruc -> SpaInstruc [ctor comm assoc prec 50] .
 op skip : -> SpaInstruc [ctor] .

 op s : SpaInstruc Nat -> SpaInstruc [ctor] .
 op x : SpaInstruc Nat -> SpaInstruc [ctor] .

 op rec _in_ : Qid SpaInstruc -> SpaInstruc [ctor prec 30] .
 op v(_) : Qid -> SpaInstruc [ctor] .

 op unless_next_ : Const SpaInstruc -> SpaInstruc [ctor prec 30] .
 op next_ : SpaInstruc -> SpaInstruc [ctor prec 30] .

 op replaceVar : SpaInstruc Qid SpaInstruc -> SpaInstruc .

 vars P Q P1 P2 P3 : SpaInstruc .
 var i : Nat .
 vars X X1 : Qid .
 var c : Const .

 ---Defining the replaceVar funtion for each spatial instruction.
 eq replaceVar(P1 || P2,X,P3) = replaceVar(P1,X,P3) || replaceVar(P2,X,P3) .
 eq replaceVar(ask c then P1,X,P3) = ask c then replaceVar(P1,X,P3) .
 eq replaceVar(tell(c),X,P3) = tell(c) .
 eq replaceVar(skip,X,P3) = skip .
 eq replaceVar(v(X), X ,P3) = P3 .
 ceq replaceVar(v(X), X1 ,P3) = v(X) if X =/= X1 .
 eq replaceVar(s(P1,i), X , P3) = s(replaceVar(P1,X,P3),i) .
 eq replaceVar(x(P1,i),X,P2) = x(replaceVar(P1,X,P2),i) .
 eq replaceVar(rec X in P1, X, P2) = rec X in P1 .
 ceq replaceVar(rec X1 in P1, X, P2) = rec X1 in replaceVar(P1, X , P2) if X1 =/= X  .
 eq replaceVar(unless c next P1,X,P3) = unless c next replaceVar(P1,X,P3) .
 eq replaceVar(next P1,X,P3) = next replaceVar(P1,X,P3) .
 ---

--- Structural Rules ---

eq  P || P = P .
eq  P || skip = P .
eq  rec X in skip  = skip .

 --- Equations for deleting skip instructions and applying the extrusion operator.

 eq s(x(P,i) || Q , i) =  P || s(Q,i) .

 eq s(x(P,i),i)  =  P .

 eq s(skip,i)  = skip .

--- eq s(P || Q, i) = s(P, i) || s(Q, i) .

eq  s(P, i) || s(Q, i) = s(P || Q, i) .

 eq x(skip,i) = skip .

 ------
endm
------------

---Defining the main configuration for a SCCP system.
mod SCCP-SYMBOLS is
 pr CLOUD .
 pr SPAINSTRUC .
 sort Conf .

 op <_;_> : SpaInstruc Cloud -> Conf [ctor] .

 op error : -> Conf [ctor] . *** needed for the meta-level

endm
--------

mod STRPAT-DEDUC is
 inc STRING-PATTERN .
 sort Deduc .
 inc BOOL .
 subsort Bool < Deduc .

 var S : String .
 var P : Pattern .

 op deduc : String Pattern -> Deduc .
 op error : -> Deduc .

 crl [deduc] :
  deduc(S,P) => true if
  ( S | P ) => ( "" | "" ) .
endm

mod STRPAT-META is
 pr META-LEVEL .
 inc STRPAT-DEDUC .

 var D : Deduc .
 var S : String .
 var P : Pattern .
 var x  : Deduc .
 op _|-_ : String Pattern -> Deduc .
 ---TODO: find out what unbounded is
 ceq S |- P = true if downTerm(getTerm(metaRewrite(upModule('STRPAT-DEDUC, false), upTerm(deduc(S,P)), unbounded)), error) .
 eq S |- P = false [owise] .

endm

---red in STRPAT-META : "234543234567876543765433345672345e" |- number .

---search in STRING-PATTERN : ( "234543234567876543765433345672345e" | number ) =>* ( "" | "" ) .

---Module that defines the operational semantics of the language.
mod SCCP is
 pr STRPAT-META .
 inc SCCP-SYMBOLS .
 pr STRING-PATTERN .
 pr CONST .

 var c : Const .

 var C1 : ConstSet .
 var S1 : Const .

 var C : Const .
 vars CL CL' TM TM' : Cloud .
 vars P Q P' : SpaInstruc .
 var SP : SpaInstruc .
 var i : Nat .
 var F : ForestConstSet .
 var X : Qid .

 ---Rules for Tell Operator
 rl < tell(C) ; CL > =>
< skip ; insertel(C,CL) > .

 rl < tell(C) || Q ; CL > =>
< skip || Q ; insertel(C,CL) > .
 ------

---Equations for Tell Operator
---eq < tell(C) ; CL > = < skip ; insertel(C,CL) > .
---eq < tell(C) || Q ; CL > = < skip || Q ; insertel(C,CL) > .
------


 ---Rules for Spatial instructions
 crl [SpaInstruc] :
 < s(P,i) ; CL > =>
 < s(P',i) ; CL U [CL'] i >
 if
 < P ; (CL) ^ i > =>
 < P' ; CL' > /\ P =/= P' .

 crl [SpaInstruc2] :
 < Q || s(P,i) ; CL > =>
 < Q || s(P',i) ; CL U [CL'] i >
 if
 < P ; (CL) ^ i > =>
 < P' ; CL' > /\ P =/= P' .
 ------

 ---Rules for Recursion instructions
 crl [Rec] :
 < rec X in P ; CL > =>
 < P' ; CL' >
 if < replaceVar(P,X,rec X in P) ; CL > =>
 < P' ; CL' > .

  crl [Rec2] :
 < rec X in P || Q ; CL > =>
 < P' || Q ; CL' >
 if < replaceVar(P,X,rec X in P) ; CL > =>
 < P' ; CL' > .
 ------

 ---Rules for When Do Operator
 crl < ask C then P ; (S1 , C1)[F] > =>
 < P ; (S1 , C1)[F] >
 if
 S1 |- C .

 crl < Q || ask C then P ; (S1 , C1)[F] > =>
 < Q || P ; (S1 , C1)[F] >
 if
 S1 |- C  .
 ------



endm
--------

 ---Derived Operators & User Language For Social Networking .

mod SYNTAX4SOCIALNET is
 inc SCCP .

 op header :  -> Pattern .
 op @_ : String -> Int .

 op enter_do_ : Int SpaInstruc -> SpaInstruc [ctor prec 30] .
 op exit_do_ : Int SpaInstruc -> SpaInstruc [ctor prec 30] .

 op _^_ : SpaInstruc Nat -> SpaInstruc [ctor prec 30] .
 op [_]_ : SpaInstruc Nat -> SpaInstruc .
 op xtr : SpaInstruc Nat -> SpaInstruc .
 op call(_) : Qid -> SpaInstruc [ctor] .

 op npost(_) : Const -> SpaInstruc [strat (0) prec 30] .
 op post(_) : Const -> SpaInstruc [strat (0) prec 30] .
 op rpost(_) : Const -> SpaInstruc [strat (0) prec 30] .


 op repeat_ : SpaInstruc -> SpaInstruc [strat (0) prec 30] .
 op whenever_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op do_until_ : SpaInstruc Const -> SpaInstruc [prec 30] .
 op when_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op while_do_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op now_then_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op now_else_ : Const SpaInstruc -> SpaInstruc [prec 30] .
 op say(_) : Const -> SpaInstruc [strat (0) prec 30] .
 op signal(_) : Const -> SpaInstruc [strat (0) prec 30] .
 op clock(_) : Const -> SpaInstruc [strat (0) prec 30] .

 op kill(_) : String -> SpaInstruc [strat (0) prec 30] .
 op rm(_,_,_) : Pattern Pattern Pattern -> SpaInstruc [strat (0) prec 30] .

 op kill-pid :  -> Const .
 op kill-all : -> Const .
 op kill-usn : -> Const .
 op kill-proc-cond : -> Const .

 op clock(_) : String -> SpaInstruc [strat (0) prec 30] .
 op signal(_) : String ->  SpaInstruc [strat (0) prec 30] .
 op tick :  -> SpaInstruc  .

 op loop : -> SpaInstruc .
 vars P P' Q : SpaInstruc .
 var i : Nat .
 var c : Const .
 var X : Qid .
 vars agent s : String .

 vars pid-p usr-p msg-p : Pattern .

 eq [P]i = s(P,i) .
 eq xtr(P,i) = x(P,i) .

 ceq enter i do P = s(P,i) if i >= 0 .
 eq enter i do P = skip [owise] .

 ceq exit i do P = x(P,i) if i >= 0 .
 eq exit i do P = skip [owise] .



 eq P ^ i = x(P,i ) .


--- Table of Agents (note: more effeciently as a hash table)
------ users
 ceq @ agent = 0 if agent = "admin" .
 ceq @ agent = 1 if agent = "hector" .
 ceq @ agent = 3 if agent = "frank" .
 ceq @ agent = 5 if agent = "camilo" .
 ceq @ agent = 7 if agent = "jason" .
 ceq @ agent = 9 if agent = "santiago" .

------ special spaces (top = table of processes, abattoir = contains pids to be killed )
 ceq @ agent = 2 if agent = "top" .
 ceq @ agent = 4 if agent = "abattoir" .
 ceq @ agent = 6 if agent = "clock" .

--- error : check this use of [owise] .
 eq  @ agent = -1 [owise]  .

---- end Table of Agents.

 eq loop = rec 'x in v('x) .

 eq header = "<" .  *   .

 eq kill-all  = "{k:a}" .

 eq kill-pid = "<pid|" .
 eq kill-usn = "|usn>" .

 eq kill-proc-cond = kill-pid v kill-usn v kill-all .


 eq rm(* , * , *) =  ( enter @ "abattoir" do tell( * ) ) .
 ceq rm(pid-p , * , *) =  ( enter @ "abattoir" do tell( "<" . pid-p . "|" . * ) ) if pid-p =/= * .
 ceq rm(* , usr-p , *) =  ( enter @ "abattoir" do tell( * . "|" . usr-p . ">" . * ) ) if usr-p =/= * .
 ceq rm(* , * , msg-p) = ( enter @ "abattoir" do tell( * . ">" . msg-p ) ) if msg-p =/= * .
 eq rm(pid-p , usr-p , msg-p) =  ( enter @ "abattoir" do tell( "<" . pid-p . "|" . usr-p . ">" . msg-p ) ) [owise].
---self-reference issue if we add this: || ( enter @ "top" do enter @ "abattoir" do  tell(....)  ) .

 ceq kill(s) =
  ( enter @ "abattoir" do (tell(kill-all) || tell( * ) ) ) ||
  ( enter @ "top" do enter @ "abattoir" do  (tell(kill-all) || tell( * )  ) ) if s = "all" .

 eq kill(s) =
  (enter @ "abattoir" do ( tell("<" + s + "|") || tell( "|" + s + ">" )  ||  tell( "<" . s . "|" . * ) || tell( "<" . * . "|" . s . ">" . * )  ) )  ||
  (enter @ "top" do
   enter @ "abattoir" do  ( tell("<" + s + "|") || tell( "|" + s + ">" )  ||  tell( "<" . s . "|" . * ) || tell( "<" . * . "|" . s . ">" . * )  )   )
    [owise] .




---todo: remove npost, simplify the above code by allowing kill(pid) to be replaced with the appropiate value for pid, use constants for markers.

 eq post(c) = tell(c) .

 eq npost(c) = post(c) .

 eq rpost(c)  = rec 'vpost in ( tell(c) ||
                    enter @ "abattoir" do unless kill-proc-cond next exit @ "abattoir" do v('vpost) ) .


 eq repeat repeat P = repeat P .
 eq repeat ( P ||  Q) = repeat P || repeat Q .

 eq repeat P = rec 'vrep in ( P ||
                    enter @ "abattoir" do unless kill-proc-cond next exit @ "abattoir" do v('vrep) ) .

 eq whenever c do P = rec 'vwhenever in ( ask header . c then P ||
                    enter @ "abattoir" do unless kill-proc-cond next exit @ "abattoir" do v('vwhenever)) .

 eq do P until c = rec 'vuntil in (P || (ask header . c then  enter @ "abattoir" do  tell("<u>" . c))   ||
                    enter @ "abattoir" do unless  kill-proc-cond v ( "<u>" . c)  next exit @ "abattoir" do v('vuntil)) .

 eq when c do P = rec 'vwhen in ( ask header . c then ( P || enter @ "abattoir" do tell("<w>" . c) )  ||
                   enter @ "abattoir" do unless kill-proc-cond v ( "<w>" . c ) next exit @ "abattoir" do  v('vwhen)) .

 eq while c do P = rec 'vwhile in ( ask header . c then ( P || enter @ "abattoir" do unless kill-proc-cond next exit @ "abattoir" do next v('vwhile) )
                                     ) .

 eq now c then P = ask header . c then P .

 eq now c else Q =  unless ( (header . c) v kill-proc-cond) next Q .

 eq say(c) = tell(c) || next ((enter @ "abattoir" do  tell("<pids|" . *)) || (enter @ "top" do enter @ "abattoir" do  tell("<pids|" . *)) ) .

 
 --- eq signal(s) = tell(s) || rm( * , * , s ) .

 ---eq tick = enter @ "clock" do signal("tick") .

--- eq clock(s) = enter @ "clock" do ( tell(s) || next(rm( * , * , s )) ) .


 eq call(X) = enter @ "abattoir" do unless kill-proc-cond next exit @ "abattoir" do v(X) .
 eq signal(c) = tell(c) || enter @ "abattoir" do tell(c) .
 eq clock(c) = enter @ "clock" do (tell(c) || next enter @  "abattoir" do tell(c)) .
endm



mod NTCCPLUS+ is
 inc SCCP-SYMBOLS .
 pr STRPAT-META .

 op f : SpaInstruc Cloud -> SpaInstruc .

 var F : ForestConstSet .
 var S : ConstSet .
 vars C c : Const .
 var X : Qid .
 vars P Q R : SpaInstruc .
 var i : Nat .
 var M : Cloud .

 eq f(P || Q , M) = f(P , M) || f(Q , M) .
 eq f(skip , M) = skip .
 eq f(next P , M) = P .
 eq f(tell(c) , M) = skip .
 eq f(ask c then P , M) = skip .
 eq f(rec X in P , M) = rec X in f(P , M) .
 eq f(s(P,i) , M) = s(f(P , (M) ^ i),i) .
 eq f(x(P,i) , M) = skip .
 ceq f(unless c next P , (C,S)[F]) = skip
  if
 C |- c .
 eq f(unless c next P , M) = P [owise] .

endm

mod MEMORYKILL is
 inc SCCP-SYMBOLS .
 inc STRPAT-META .
 inc SYNTAX4SOCIALNET .
 op memkill : Cloud -> Cloud .
 op auxmemkill : ConstSet ConstSet -> ConstSet .
 op forestkill : ForestConstSet Nat -> ForestConstSet .
 op auxforestkill : ForestConstSet -> ForestConstSet .
 op elimpid : ConstSet String -> ConstSet .
 op getpid : String -> String .
 op getTree : TreeConstSet Nat -> ConstSet .
 op match : String String -> Bool .

 vars R C : ConstSet .
 vars F F1 : ForestConstSet .
 vars T T2 : TreeConstSet .
 var S  : String .
 var N : Nat .
 var P : Const .
 eq getTree(T , N) = root((T) ^ N) .
 eq memkill(R[F]) =  auxmemkill(R,getTree(R[F],@ "abattoir"))[ forestkill(F,@ "abattoir")] .

 eq forestkill(T : F, s(N)) = memkill(T) : forestkill(F, N) .
 eq forestkill(C[F1] : F, 0) = empty[F1] : auxforestkill(F)  .
 eq forestkill(empty-forest, N) = empty-forest .
 eq auxforestkill(T : F) = memkill(T) : auxforestkill(F) .
 eq auxforestkill(empty-forest) = empty-forest .



--- ceq elimpid((S,C),P) = elimpid(C,P) if S |- "<" . getpid(P) . * . ">" . *  .
--- eq elimpid(C,P) = C [owise] .
 ceq getpid(S) = "" if S == "" .
 ceq getpid(S) = substr(S,0,1) + getpid(substr(S,1,length(S))) if ascii(substr(S,0,1)) > 47 /\ ascii(substr(S,0,1)) < 58 .
 eq getpid(S) = getpid(substr(S,1,length(S))) [owise] .

 eq auxmemkill(empty,R) = empty .
 eq auxmemkill(R,empty) = R .
 ---ceq auxmemkill((P,R),(S,C)) = auxmemkill(R,(S,C)) if match(P,"<" + getpid(S))  .
 ceq  auxmemkill((S,R),(P,C)) = auxmemkill(R,(P,C)) if S |- P  .
 eq auxmemkill(R,C) = R [owise] .

 ceq match(P,S) = true if substr(P,0,length(S)) == S .
 eq match(P,S) = false [owise] .
endm

---red in MEMORYKILL : memkill(("<14 > sdasdd", "<12>asdkjajdsa", "<13>ajhsdjahsd")[empty[empty-forest] : empty[empty-forest] : "{k:12}"[empty-forest] : empty-forest]) .
---red in MEMORYKILL : auxmemkill(("<14 > sdasdd", "<12>asdkjajdsa", "<13>ajhsdjahsd"),("{k:17}" , "{k:13}")) .
---red in MEMORYKILL : match("<12|hectorblabla> aksasahs","<123") .
---red ascii("1") .
---red in MEMORYKILL : elimpid(("<12|hector>hey","lala") , "{k:12}") .
---red substr("{k:1212}", 1 , length("{k:1212}")) .
---red in MEMORYKILL : getpid("{k:1212}") .
---red in MEMORYKILL : elimpid(empty,"{k:100}") .

---rew in MEMORYKILL : "hey"[empty[empty-forest] : "{k:100}"[empty-forest] : empty-forest] .
mod SCCP-RUN is
  pr SYNTAX4SOCIALNET .

endm


mod SCCP-META is
 inc SCCP .

 vars P Q : SpaInstruc .
 vars Cf : Conf .

 op sccp* : Conf -> Conf .

 eq sccp*(Cf) = downTerm(getTerm(metaRewrite(upModule('SCCP, false), upTerm(Cf), unbounded)), error) .
endm

mod NTCC-RUN is
 pr NTCCPLUS+ .
 pr SCCP-META .
 pr MEMORYKILL .

 vars P Q : SpaInstruc .
 vars M N : Cloud .

 op IO : Conf -> Conf .

 ceq IO(< P ; M >) = < f(Q,N) ; memkill(N) > if < Q ; N > := sccp*(< P ; M >) .
endm

mod U2N is
 pr SPAINSTRUC .
 op u2n : SpaInstruc -> SpaInstruc .

 vars P Q : SpaInstruc .
 var c : Const .
 var i : Nat .
 var x : Qid .

 eq u2n(tell(c)) = tell(c) .
 eq u2n(skip) = skip .
 eq u2n(s(P,i)) = s(u2n(P),i) .
 eq u2n(x(P,i)) = x(u2n(P),i) .
 eq u2n(rec x in P) = rec x in u2n(P) .
 eq u2n(ask c then P) = ask c then u2n(P) .
 eq u2n(v(x)) = v(x) .
 eq u2n(P || Q) = u2n(P) || u2n(Q) .
 eq u2n(unless c next P) = next P .
 eq u2n(next P) = next P .

endm
